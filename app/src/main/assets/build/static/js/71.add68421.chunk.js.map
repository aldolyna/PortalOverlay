{"version":3,"sources":["../../../src/web.ts"],"names":["DeviceWeb","a","uuid","this","getUid","navigator","userAgent","unavailable","ua","uaFields","parseUa","model","platform","operatingSystem","osVersion","manufacturer","vendor","isVirtual","webViewVersion","browserVersion","getBattery","battery","batteryLevel","level","isCharging","charging","value","language","start","indexOf","end","fields","substring","tmpFields","replace","split","pop","oscpu","lastParts","length","test","window","MSStream","isFirefox","InstallTrigger","isSafari","ApplePaySession","isChrome","chrome","isEdge","isFirefoxIOS","isChromeIOS","isEdgeIOS","searchWord","words","word","includes","version","reverse","join","uid","localStorage","getItem","uuid4","setItem","c","r","Math","random","toString"],"mappings":"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","file":"static/js/71.add68421.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  BatteryInfo,\n  DeviceId,\n  DeviceInfo,\n  DevicePlugin,\n  GetLanguageCodeResult,\n} from './definitions';\n\ndeclare global {\n  interface Navigator {\n    getBattery: any;\n    oscpu: any;\n  }\n\n  interface Window {\n    InstallTrigger?: any;\n    ApplePaySession?: any;\n    chrome?: any;\n  }\n}\n\nexport class DeviceWeb extends WebPlugin implements DevicePlugin {\n  async getId(): Promise<DeviceId> {\n    return {\n      uuid: this.getUid(),\n    };\n  }\n\n  async getInfo(): Promise<DeviceInfo> {\n    if (typeof navigator === 'undefined' || !navigator.userAgent) {\n      throw this.unavailable('Device API not available in this browser');\n    }\n\n    const ua = navigator.userAgent;\n    const uaFields = this.parseUa(ua);\n\n    return {\n      model: uaFields.model,\n      platform: <const>'web',\n      operatingSystem: uaFields.operatingSystem,\n      osVersion: uaFields.osVersion,\n      manufacturer: navigator.vendor,\n      isVirtual: false,\n      webViewVersion: uaFields.browserVersion,\n    };\n  }\n\n  async getBatteryInfo(): Promise<BatteryInfo> {\n    if (typeof navigator === 'undefined' || !navigator.getBattery) {\n      throw this.unavailable('Device API not available in this browser');\n    }\n    let battery: any = {};\n\n    try {\n      battery = await navigator.getBattery();\n    } catch (e) {\n      // Let it fail, we don't care\n    }\n\n    return {\n      batteryLevel: battery.level,\n      isCharging: battery.charging,\n    };\n  }\n\n  async getLanguageCode(): Promise<GetLanguageCodeResult> {\n    return {\n      value: navigator.language,\n    };\n  }\n\n  parseUa(ua: string): any {\n    const uaFields: any = {};\n    const start = ua.indexOf('(') + 1;\n    let end = ua.indexOf(') AppleWebKit');\n    if (ua.indexOf(') Gecko') !== -1) {\n      end = ua.indexOf(') Gecko');\n    }\n    const fields = ua.substring(start, end);\n    if (ua.indexOf('Android') !== -1) {\n      const tmpFields = fields.replace('; wv', '').split('; ').pop();\n      if (tmpFields) {\n        uaFields.model = tmpFields.split(' Build')[0];\n      }\n      uaFields.osVersion = fields.split('; ')[1];\n    } else {\n      uaFields.model = fields.split('; ')[0];\n      if (typeof navigator !== 'undefined' && navigator.oscpu) {\n        uaFields.osVersion = navigator.oscpu;\n      } else {\n        if (ua.indexOf('Windows') !== -1) {\n          uaFields.osVersion = fields;\n        } else {\n          const tmpFields = fields.split('; ').pop();\n          if (tmpFields) {\n            const lastParts = tmpFields\n              .replace(' like Mac OS X', '')\n              .split(' ');\n            uaFields.osVersion = lastParts[lastParts.length - 1].replace(\n              /_/g,\n              '.',\n            );\n          }\n        }\n      }\n    }\n\n    if (/android/i.test(ua)) {\n      uaFields.operatingSystem = 'android';\n    } else if (/iPad|iPhone|iPod/.test(ua) && !window.MSStream) {\n      uaFields.operatingSystem = 'ios';\n    } else if (/Win/.test(ua)) {\n      uaFields.operatingSystem = 'windows';\n    } else if (/Mac/i.test(ua)) {\n      uaFields.operatingSystem = 'mac';\n    } else {\n      uaFields.operatingSystem = 'unknown';\n    }\n\n    // Check for browsers based on non-standard javascript apis, only not user agent\n    const isFirefox = !!window.InstallTrigger;\n    const isSafari = !!window.ApplePaySession;\n    const isChrome = !!window.chrome;\n    const isEdge = /Edg/.test(ua);\n    const isFirefoxIOS = /FxiOS/.test(ua);\n    const isChromeIOS = /CriOS/.test(ua);\n    const isEdgeIOS = /EdgiOS/.test(ua);\n\n    // FF and Edge User Agents both end with \"/MAJOR.MINOR\"\n    if (\n      isSafari ||\n      (isChrome && !isEdge) ||\n      isFirefoxIOS ||\n      isChromeIOS ||\n      isEdgeIOS\n    ) {\n      // Safari version comes as     \"... Version/MAJOR.MINOR ...\"\n      // Chrome version comes as     \"... Chrome/MAJOR.MINOR ...\"\n      // FirefoxIOS version comes as \"... FxiOS/MAJOR.MINOR ...\"\n      // ChromeIOS version comes as  \"... CriOS/MAJOR.MINOR ...\"\n      let searchWord: string;\n      if (isFirefoxIOS) {\n        searchWord = 'FxiOS';\n      } else if (isChromeIOS) {\n        searchWord = 'CriOS';\n      } else if (isEdgeIOS) {\n        searchWord = 'EdgiOS';\n      } else if (isSafari) {\n        searchWord = 'Version';\n      } else {\n        searchWord = 'Chrome';\n      }\n\n      const words = ua.split(' ');\n      for (const word of words) {\n        if (word.includes(searchWord)) {\n          const version = word.split('/')[1];\n          uaFields.browserVersion = version;\n        }\n      }\n    } else if (isFirefox || isEdge) {\n      const reverseUA = ua.split('').reverse().join('');\n      const reverseVersion = reverseUA.split('/')[0];\n      const version = reverseVersion.split('').reverse().join('');\n      uaFields.browserVersion = version;\n    }\n\n    return uaFields;\n  }\n\n  getUid(): string {\n    if (typeof window !== 'undefined') {\n      let uid = window.localStorage.getItem('_capuid');\n      if (uid) {\n        return uid;\n      }\n\n      uid = this.uuid4();\n      window.localStorage.setItem('_capuid', uid);\n      return uid;\n    }\n    return this.uuid4();\n  }\n\n  uuid4(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n      /[xy]/g,\n      function (c) {\n        const r = (Math.random() * 16) | 0,\n          v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n      },\n    );\n  }\n}\n"],"sourceRoot":""}