{"version":3,"sources":["../../../src/web.ts"],"names":["HapticsWeb","selectionStarted","options","a","pattern","this","patternForImpact","style","vibrateWithPattern","patternForNotification","type","duration","Heavy","Medium","Light","Success","Warning","Error","navigator","vibrate","unavailable"],"mappings":"4OAUaA,EAAb,iG,2BACEC,kBAAmB,EADrB,mFAGE,WAAaC,GAAb,eAAAC,EAAA,sDACQC,EAAUC,KAAKC,iBAAwB,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASK,OAC/CF,KAAKG,mBAAmBJ,GAF1B,gDAHF,wHAQE,WAAmBF,GAAnB,eAAAC,EAAA,sDACQC,EAAUC,KAAKI,uBAA8B,OAAPP,QAAO,IAAPA,OAAO,EAAPA,EAASQ,MACrDL,KAAKG,mBAAmBJ,GAF1B,gDARF,mHAaE,WAAcF,GAAd,eAAAC,EAAA,sDACQQ,GAAkB,OAAPT,QAAO,IAAPA,OAAO,EAAPA,EAASS,WAAY,IACtCN,KAAKG,mBAAmB,CAACG,IAF3B,gDAbF,0HAkBE,sBAAAR,EAAA,sDACEE,KAAKJ,kBAAmB,EAD1B,gDAlBF,2HAsBE,sBAAAE,EAAA,sDACME,KAAKJ,kBACPI,KAAKG,mBAAmB,CAAC,KAF7B,gDAtBF,uHA4BE,sBAAAL,EAAA,sDACEE,KAAKJ,kBAAmB,EAD1B,gDA5BF,oFAgCU,WAAuD,IAAtCM,EAAsC,uDAAjB,IAAYK,MACxD,OAAIL,IAAU,IAAYM,OACjB,CAAC,IACCN,IAAU,IAAYO,MACxB,CAAC,IAEH,CAAC,MAtCZ,oCAyCU,WAC2C,IAAjDJ,EAAiD,uDAAxB,IAAiBK,QAE1C,OAAIL,IAAS,IAAiBM,QACrB,CAAC,GAAI,GAAI,GAAI,GAAI,IACfN,IAAS,IAAiBO,MAC5B,CAAC,GAAI,GAAI,IAEX,CAAC,GAAI,GAAI,MAjDpB,gCAoDU,SAAmBb,GACzB,IAAIc,UAAUC,QAGZ,MAAMd,KAAKe,YAAY,4CAFvBF,UAAUC,QAAQf,OAtDxB,GAAgC","file":"static/js/73.c5ce53af.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport { ImpactStyle, NotificationType } from './definitions';\nimport type {\n  HapticsPlugin,\n  ImpactOptions,\n  NotificationOptions,\n  VibrateOptions,\n} from './definitions';\n\nexport class HapticsWeb extends WebPlugin implements HapticsPlugin {\n  selectionStarted = false;\n\n  async impact(options?: ImpactOptions): Promise<void> {\n    const pattern = this.patternForImpact(options?.style);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async notification(options?: NotificationOptions): Promise<void> {\n    const pattern = this.patternForNotification(options?.type);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async vibrate(options?: VibrateOptions): Promise<void> {\n    const duration = options?.duration || 300;\n    this.vibrateWithPattern([duration]);\n  }\n\n  async selectionStart(): Promise<void> {\n    this.selectionStarted = true;\n  }\n\n  async selectionChanged(): Promise<void> {\n    if (this.selectionStarted) {\n      this.vibrateWithPattern([70]);\n    }\n  }\n\n  async selectionEnd(): Promise<void> {\n    this.selectionStarted = false;\n  }\n\n  private patternForImpact(style: ImpactStyle = ImpactStyle.Heavy): number[] {\n    if (style === ImpactStyle.Medium) {\n      return [43];\n    } else if (style === ImpactStyle.Light) {\n      return [20];\n    }\n    return [61];\n  }\n\n  private patternForNotification(\n    type: NotificationType = NotificationType.Success,\n  ): number[] {\n    if (type === NotificationType.Warning) {\n      return [30, 40, 30, 50, 60];\n    } else if (type === NotificationType.Error) {\n      return [27, 45, 50];\n    }\n    return [35, 65, 21];\n  }\n\n  private vibrateWithPattern(pattern: number[]) {\n    if (navigator.vibrate) {\n      navigator.vibrate(pattern);\n    } else {\n      throw this.unavailable('Browser does not support the vibrate API');\n    }\n  }\n}\n"],"sourceRoot":""}